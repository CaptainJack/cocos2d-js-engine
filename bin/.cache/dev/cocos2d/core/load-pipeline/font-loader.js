
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/load-pipeline/font-loader.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

/****************************************************************************
 Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

 https://www.cocos.com/

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
  worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
  not use Cocos Creator software for developing other software or tools that's
  used for developing games. You are not granted to publish, distribute,
  sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/
var textUtils = require('../utils/text-utils');

var _canvasContext = null; // letter symbol number CJK

var _testString = "BES bswy:->@123\u4E01\u3041\u1101";
var _fontFaces = {};

var _intervalId = -1;

var _loadingFonts = []; // 60 seconds timeout

var _timeout = 60000; // Refer to https://github.com/typekit/webfontloader/blob/master/src/core/fontwatcher.js

var useNativeCheck = function () {
  var nativeCheck = undefined;
  return function () {
    if (nativeCheck === undefined) {
      if (!!window.FontFace) {
        var match = /Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent);
        var safari10Match = /OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent) && /Apple/.exec(window.navigator.vendor);

        if (match) {
          nativeCheck = parseInt(match[1], 10) > 42;
        } else if (safari10Match) {
          nativeCheck = false;
        } else {
          nativeCheck = true;
        }
      } else {
        nativeCheck = false;
      }
    }

    return nativeCheck;
  };
}();

function _checkFontLoaded() {
  var allFontsLoaded = true;
  var now = Date.now();

  for (var i = _loadingFonts.length - 1; i >= 0; i--) {
    var fontLoadHandle = _loadingFonts[i];
    var fontFamily = fontLoadHandle.fontFamilyName; // load timeout

    if (now - fontLoadHandle.startTime > _timeout) {
      cc.warnID(4933, fontFamily);
      fontLoadHandle.callback(null, fontFamily);

      _loadingFonts.splice(i, 1);

      continue;
    }

    var oldWidth = fontLoadHandle.refWidth;
    var fontDesc = '40px ' + fontFamily;
    _canvasContext.font = fontDesc;
    var newWidth = textUtils.safeMeasureText(_canvasContext, _testString, fontDesc); // loaded successfully

    if (oldWidth !== newWidth) {
      _loadingFonts.splice(i, 1);

      fontLoadHandle.callback(null, fontFamily);
    } else {
      allFontsLoaded = false;
    }
  }

  if (allFontsLoaded) {
    clearInterval(_intervalId);
    _intervalId = -1;
  }
} // refer to https://github.com/typekit/webfontloader/blob/master/src/core/nativefontwatchrunner.js


function nativeCheckFontLoaded(start, font, callback) {
  var loader = new Promise(function (resolve, reject) {
    var check = function check() {
      var now = Date.now();

      if (now - start >= _timeout) {
        reject();
      } else {
        document.fonts.load('40px ' + font).then(function (fonts) {
          if (fonts.length >= 1) {
            resolve();
          } else {
            setTimeout(check, 100);
          }
        }, function () {
          reject();
        });
      }
    };

    check();
  });
  var timeoutId = null,
      timer = new Promise(function (resolve, reject) {
    timeoutId = setTimeout(reject, _timeout);
  });
  Promise.race([timer, loader]).then(function () {
    if (timeoutId) {
      clearTimeout(timeoutId);
      timeoutId = null;
    }

    callback(null, font);
  }, function () {
    cc.warnID(4933, font);
    callback(null, font);
  });
}

var fontLoader = {
  loadFont: function loadFont(item, callback) {
    var url = item.url;

    var fontFamilyName = fontLoader._getFontFamily(url); // Already loaded fonts


    if (_fontFaces[fontFamilyName]) {
      return fontFamilyName;
    }

    if (!_canvasContext) {
      var labelCanvas = document.createElement('canvas');
      labelCanvas.width = 100;
      labelCanvas.height = 100;
      _canvasContext = labelCanvas.getContext('2d');
    } // Default width reference to test whether new font is loaded correctly


    var fontDesc = '40px ' + fontFamilyName;
    _canvasContext.font = fontDesc;
    var refWidth = textUtils.safeMeasureText(_canvasContext, _testString, fontDesc); // Setup font face style

    var fontStyle = document.createElement("style");
    fontStyle.type = "text/css";
    var fontStr = "";
    if (isNaN(fontFamilyName - 0)) fontStr += "@font-face { font-family:" + fontFamilyName + "; src:";else fontStr += "@font-face { font-family:'" + fontFamilyName + "'; src:";
    fontStr += "url('" + url + "');";
    fontStyle.textContent = fontStr + "}";
    document.body.appendChild(fontStyle); // Preload font with div

    var preloadDiv = document.createElement("div");
    var divStyle = preloadDiv.style;
    divStyle.fontFamily = fontFamilyName;
    preloadDiv.innerHTML = ".";
    divStyle.position = "absolute";
    divStyle.left = "-100px";
    divStyle.top = "-100px";
    document.body.appendChild(preloadDiv);

    if (useNativeCheck()) {
      nativeCheckFontLoaded(Date.now(), fontFamilyName, callback);
    } else {
      // Save loading font
      var fontLoadHandle = {
        fontFamilyName: fontFamilyName,
        refWidth: refWidth,
        callback: callback,
        startTime: Date.now()
      };

      _loadingFonts.push(fontLoadHandle);

      if (_intervalId === -1) {
        _intervalId = setInterval(_checkFontLoaded, 100);
      }
    }

    _fontFaces[fontFamilyName] = fontStyle;
  },
  _getFontFamily: function _getFontFamily(fontHandle) {
    var ttfIndex = fontHandle.lastIndexOf(".ttf");
    if (ttfIndex === -1) return fontHandle;
    var slashPos = fontHandle.lastIndexOf("/");
    var fontFamilyName;

    if (slashPos === -1) {
      fontFamilyName = fontHandle.substring(0, ttfIndex) + "_LABEL";
    } else {
      fontFamilyName = fontHandle.substring(slashPos + 1, ttfIndex) + "_LABEL";
    }

    if (fontFamilyName.indexOf(' ') !== -1) {
      fontFamilyName = '"' + fontFamilyName + '"';
    }

    return fontFamilyName;
  }
};
module.exports = fontLoader;
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,